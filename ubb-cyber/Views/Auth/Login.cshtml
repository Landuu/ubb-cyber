@model ubb_cyber.ViewModels.LoginViewModel;
@{
    ViewData["Title"] = "Logowanie";
}

<div class="d-flex justify-content-center mt-2 mb-5">
    <div class="w-50 p-4">
        <div class="fs-4 text-center">
            🔐 Logowanie
        </div>
        <div>
            <form asp-controller="Auth" asp-action="Login">
                <div class="mb-3">
                    <label for="inputLogin" class="form-label">Login</label>
                    <input asp-for="Login" type="text" class="form-control" id="inputLogin">
                    @* <span class="text-danger" asp-validation-for="Login"></span> *@
                </div>
                <div class="mb-3">
                    <label for="inputPassword" class="form-label">Hasło</label>
                    <input asp-for="Password" type="password" class="form-control" id="inputPassword">
                    
                </div>
                <div class="bg-light p-2 mb-3">
                    <div>
                        <label for="inputOtp" class="form-label">Wpisz hasło jednorazowe</label>
                        <input asp-for="Otp" type="text" class="form-control form-control-sm" id="inputOtp">
                    </div>

                    <div>
                        <label for="otpDesc" class="form-label">Funkcja:</label>
                        <input id="otpDesc" value="a*ln(x)" class="form-control form-control-sm" disabled="disabled" />
                    </div>

                    <div class="d-flex gap-2">
                        <div>
                            <label for="otpX" class="form-label">x:</label>
                            <input asp-for="OtpX" readonly="readonly" id="otpX" class="form-control form-control-sm" />
                        </div>
                        <div>
                            <label for="otpA" class="form-label">a:</label>
                            <input readonly="readonly" id="otpA" class="form-control form-control-sm" />
                        </div>
                    </div>
                </div>

                <div class="bg-warning p-2 mb-3">
                    <div class="fw-bold">
                        CAPTCHA: Rozwiąż zadanie matematyczne
                    </div>
                    <div class="bg-white text-center fs-3 fw-medium p-2">
                        @(Model.CaptchaA) + @(Model.CaptchaB)
                    </div>

                    <div class="mt-2">
                        <input asp-for="CaptchaAnswer" id="captcha" class="form-control form-control-sm" />
                    </div>
                </div>

                <div class="my-2">
                    <span class="text-danger" asp-validation-for="Login"></span>
                </div>

                <input type="number" value="@Model.CaptchaA" name="@nameof(Model.CaptchaA)" hidden />
                <input type="number" value="@Model.CaptchaB" name="@nameof(Model.CaptchaB)" hidden />
                
                <div class="d-grid">
                    <button type="submit" class="btn btn-primary px-3">Zaloguj</button>
                </div>
            </form>
        </div>
    </div>
</div>

<script>
    const inputLogin = document.getElementById("inputLogin");
    const otpA = document.getElementById("otpA");
    const otpX = document.getElementById("otpX");

    inputLogin.addEventListener("change", (e) => {
        otpA.value = e.target.value.length;
        console.log('otp', Number(otpA.value) * Math.log(Number(otpX.value)));
    });

    window.addEventListener("load", () => {
        const userLogin = inputLogin.value;
        if (userLogin && userLogin.length > 0)
            otpA.value = userLogin.length;

        otpA.value = inputLogin.value.length;
        console.log('otp', Number(otpA.value) * Math.log(Number(otpX.value)));
    });
</script>